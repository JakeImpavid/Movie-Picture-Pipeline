name: Frontend CD

on:
  push:
    branches:
      - main  # Automatically run on merges to the main branch
  workflow_dispatch:  # Allow manual execution for verification

jobs:
  # Lint job
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ./starter/frontend/node_modules  # Path to node_modules in starter/frontend directory
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm install
        working-directory: ./starter/frontend

      - name: Run lint
        run: npm run lint
        working-directory: ./starter/frontend

  # Test job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ./starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm install
        working-directory: ./starter/frontend

      - name: Run tests
        run: npm run test
        working-directory: ./starter/frontend

  # Build job, depends on lint and test jobs
  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build Docker image
        run: docker build --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }} -t frontend-app:${{ github.sha }} .
        working-directory: ./starter/frontend

      - name: List Docker images (for debugging)
        run: docker images

      - name: Tag Docker image for ECR
        run: docker tag frontend-app:${{ github.sha }} ${{ secrets.FRONTEND_ECR }}:${{ github.sha }}

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.FRONTEND_ECR }}:${{ github.sha }}


  # Deploy to EKS
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/frontend-deployment frontend-container=${{ secrets.FRONTEND_ECR }}:${{ github.sha }}
          kubectl apply -f starter/frontend/k8s/
