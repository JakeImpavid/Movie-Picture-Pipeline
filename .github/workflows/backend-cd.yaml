name: Backend CD

on:
  push:
    branches:
      - main  # Automatically run on merges to the main branch
  workflow_dispatch:  # Allow manual execution for verification

jobs:
  # Lint job
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Pipenv
        run: pip install pipenv

      - name: Cache Pipenv environment
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs  # Cache Pipenv virtual environment
          key: ${{ runner.os }}-pipenv-${{ hashFiles('starter/backend/Pipfile.lock') }}

      - name: Install dependencies with Pipenv
        run: pipenv install --dev
        working-directory: ./starter/backend

      - name: Run lint
        run: pipenv run flake8
        working-directory: ./starter/backend

  # Test job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Pipenv
        run: pip install pipenv

      - name: Cache Pipenv environment
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs  # Cache Pipenv virtual environment
          key: ${{ runner.os }}-pipenv-${{ hashFiles('starter/backend/Pipfile.lock') }}

      - name: Install dependencies with Pipenv
        run: pipenv install --dev
        working-directory: ./starter/backend

      - name: Run tests
        run: pipenv run pytest
        working-directory: ./starter/backend

  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t backend-app:${{ github.sha }} .
        working-directory: ./starter/backend

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Tag and Push Docker image to ECR
        run: |
          docker tag backend-app:${{ github.sha }} ${{ secrets.BACKEND_ECR }}:${{ github.sha }}
          docker push ${{ secrets.BACKEND_ECR }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install AWS CLI and kubectl
      - name: Install AWS CLI and kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          # Install AWS IAM Authenticator
          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2020-11-02/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          sudo mv aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

      # Install Kustomize from GitHub releases
      - name: Install Kustomize
        run: |
          curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest \
          | grep browser_download_url \
          | grep linux_amd64 \
          | cut -d '"' -f 4 \
          | wget -qi - \
          && tar xzf kustomize_v*_linux_amd64.tar.gz \
          && sudo mv kustomize /usr/local/bin/
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Verify Kubernetes Connection
        run: kubectl get svc
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
      # Apply Kustomize Configurations
      - name: Apply Kustomize Configurations
        run: |
          kubectl apply -k starter/backend/k8s/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/backend backend=${{ secrets.BACKEND_ECR }}:${{ github.sha }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
